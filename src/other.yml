
    /**
     * Checks players permissions. Works with Bukkitpermissions and
     * PermissionsEX
     *
     * @param sender, action, which should be performed.
     * @return true if player has permission.
     */
    public boolean checkpermissions(CommandSender sender, String[] args, String other) {
        if (sender instanceof Player) {
            Player player = (Player) sender;
            if (!other.isEmpty()) {
                if (!Bukkit.getServer().getPluginManager().isPluginEnabled("PermissionsEx")) {
                    try {
                        if (player.hasPermission("xpShop." + other)) {
                            return true;
                        } //if(permissions.has(player, "xpShop." + action))
                        else {
                            player.sendMessage(ChatColor.GRAY + "[xpShop] " + ChatColor.RED + (getConfig().getString("permissions.error." + getConfig().getString("language"))));
                            return false;
                        }
                    } catch (Exception e) {
                        System.out.println("[xpShop] " + "Error on checking permissions with BukkitPermissions!");
                        player.sendMessage("[xpShop] " + "Error on checking permissions with BukkitPermissions!");
                        e.printStackTrace();
                        return false;
                    }

                } else {
                    if (Bukkit.getServer().getPluginManager().isPluginEnabled("PermissionsEx")) {
                        try {
                            PermissionManager permissions = PermissionsEx.getPermissionManager();

                            // Permission check
                            if (permissions.has(player, "xpShop." + other)) {
                                // yay!
                                return true;
                            } else {
                                // houston, we have a problem :)
                                player.sendMessage(ChatColor.GRAY + "[xpShop] " + ChatColor.RED + (getConfig().getString("permissions.error." + getConfig().getString("language"))));
                                return false;
                            }
                        } catch (Exception e) {
                            System.out.println("[xpShop] " + "Error on checking permissions with PermissionsEx!");
                            player.sendMessage("[xpShop] " + "Error on checking permissions with PermissionsEx!");
                            e.printStackTrace();
                            return false;
                        }
                    } else {
                        System.out.println("PermissionsEx plugin are not found.");
                        return false;
                    }
                }
            } else {
                if (!Bukkit.getServer().getPluginManager().isPluginEnabled("PermissionsEx")) {
                    try {
                        if (args[0].equals("infolevel") || args[0].equals("infoxp")) {
                            if (args.length == 2) {
                                if (player.hasPermission("xpShop." + args[0] + ".other")) {
                                    return true;
                                } //if(permissions.has(player, "xpShop." + other))
                                else {
                                    player.sendMessage(ChatColor.GRAY + "[xpShop] " + ChatColor.RED + (getConfig().getString("permissions.error." + getConfig().getString("language"))));
                                    return false;
                                }
                            } else if (args.length == 1) {
                                if (player.hasPermission("xpShop." + args[0] + ".own")) {
                                    return true;
                                } //if(permissions.has(player, "xpShop." + other))
                                else {
                                    player.sendMessage(ChatColor.GRAY + "[xpShop] " + ChatColor.RED + (getConfig().getString("permissions.error." + getConfig().getString("language"))));
                                    return false;
                                }
                            } else {
                                return false;
                            }
                        } else if (player.hasPermission("xpShop." + args[0])) {
                            return true;
                        } //if(permissions.has(player, "xpShop." + other))
                        else {
                            player.sendMessage(ChatColor.GRAY + "[xpShop] " + ChatColor.RED + (getConfig().getString("permissions.error." + getConfig().getString("language"))));
                            return false;
                        }
                    } catch (Exception e) {
                        System.out.println("[xpShop] " + "Error on checking permissions with BukkitPermissions!");
                        player.sendMessage("[xpShop] " + "Error on checking permissions with BukkitPermissions!");
                        e.printStackTrace();
                        return false;
                    }

                } else {
                    if (Bukkit.getServer().getPluginManager().isPluginEnabled("PermissionsEx")) {
                        try {
                            PermissionManager permissions = PermissionsEx.getPermissionManager();
                            if (args[0].equals("infolevel") || args[0].equals("infoxp")) {
                                if (args.length == 2) {
                                    if (permissions.has(player, "xpShop." + args[0] + ".other")) {
                                        return true;
                                    } //if(permissions.has(player, "xpShop." + other))
                                    else {
                                        player.sendMessage(ChatColor.GRAY + "[xpShop] " + ChatColor.RED + (getConfig().getString("permissions.error." + getConfig().getString("language"))));
                                        return false;
                                    }
                                } else if (args.length == 1) {
                                    if (permissions.has(player, "xpShop." + args[0] + ".own")) {
                                        return true;
                                    } //if(permissions.has(player, "xpShop." + other))
                                    else {
                                        player.sendMessage(ChatColor.GRAY + "[xpShop] " + ChatColor.RED + (getConfig().getString("permissions.error." + getConfig().getString("language"))));
                                        return false;
                                    }
                                } else {
                                    return false;
                                }

                            } else // Permission check
                            if (permissions.has(player, "xpShop." + args[0])) {
                                // yay!
                                return true;
                            } else {
                                // houston, we have a problem :)
                                player.sendMessage(ChatColor.GRAY + "[xpShop] " + ChatColor.RED + (getConfig().getString("permissions.error." + getConfig().getString("language"))));
                                return false;
                            }
                        } catch (Exception e) {
                            System.out.println("[xpShop] " + "Error on checking permissions with PermissionsEx!");
                            player.sendMessage("[xpShop] " + "Error on checking permissions with PermissionsEx!");
                            e.printStackTrace();
                            return false;
                        }
                    } else {
                        System.out.println("PermissionsEx plugin are not found.");
                        return false;
                    }
                }
            }
        } //if (sender instanceof Player)
        else {
            System.out.println("[xpShop] " + (getConfig().getString("command.error.noplayer" + getConfig().getString("language"))));
            return false;
        }

    } //public boolean checkpermissions(CommandSender sender, String other)

    
    
    /*public void loadConfig(){
        config.addDefault("language", "de");
        config.addDefault("command.error.toomanyarguments.de", "Dieser Befehl darf nur eine Zahl enthalten!");
        config.addDefault("command.error.toomanyarguments.en", "This command has only one number!");
        config.addDefault("permission.error.de", "Houston, Wir haben ein Problem :) Diesen Befehl darfst Du nicht verwenden!");
        config.addDefault("permission.error.en", "Houston, we have a problem! You can't use this command!");
        config.addDefault("permission.notfound.de", "PermissionsEx plugin nicht gefunden!");
        config.addDefault("permission.notfound.en", "PermissionsEx not found!");
        config.options().copyDefaults(true);
        saveConfig();
    }
    */
    
    				/*
				File configfile = new File("plugins" + File.separator + "xpShop" + File.separator + "config.yml");
				configfile.mkdir();
				if(!config.contains("language"))
				{config.set("language", "de");}
				if(!config.contains("command.error.toomanyarguments.de"))
				{config.set("command.error.toomanyarguments.de", "Dieser Befehl darf nur eine Zahl enthalten!");}
				if(!config.contains("command.error.toomanyarguments.en"))
				{config.set("command.error.toomanyarguments.en", "This command has only one number!");}
				if(!config.contains("permission.error.de"))
				{config.set("permission.error.de", "Houston, Wir haben ein Problem :) Diesen Befehl darfst Du nicht verwenden!");}
				if(!config.contains("permission.error.en"))
				{config.set("permission.error.en", "Houston, we have a problem! You can't use this command!");}
				if(!config.contains("permission.notfound.de"))
				{config.set("permission.notfound.de", "PermissionsEx plugin nicht gefunden!");}
				if(!config.contains("permission.notfound.en"))
				{config.set("permission.notfound.en", "PermissionsEx not found!");}
				*/
				
				
package me.ibhh.xpShop;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import org.bukkit.configuration.InvalidConfigurationException;
import org.bukkit.configuration.file.YamlConfiguration;

public class LanguageHandler {
private static YamlConfiguration languageFile;
private static YamlConfiguration defaultLang;

public static boolean setLang(String lang) {

if(lang == null || lang.isEmpty()) {
lang = "en";
}
File defaultLangFile = new File("en.yml");
defaultLang = new YamlConfiguration();
try {
defaultLang.loadFromString(
"ERR_NO_WORLDGUARD: 'Error: WorldGuard was not found.'\n" +
"LOG_EXPIRED_HOTEL: 'Hotel $0 was rent by $1 and just expired'");
} catch (InvalidConfigurationException e) {
outputConsole(Level.SEVERE, "[xpShop] Error: Internal language error!!");
return false;
}

try {
defaultLang.save(defaultLangFile);
} catch (IOException e) {
outputConsole(Level.SEVERE, "[xpShop] Could not save default language 'en.yml'.");
}

File choosenLangFile = new File(lang + ".yml");
boolean ret = false;
if(choosenLangFile.exists()) {
ret = true;
languageFile = YamlConfiguration.loadConfiguration(choosenLangFile);
} else {
languageFile = YamlConfiguration.loadConfiguration(defaultLangFile);
}
return ret;
}

private static String parseLanguageString(String id, ArrayList<String> args) {
String string = id;

if(languageFile != null && languageFile.getString(id) != null) {
string = languageFile.getString(id);
} else if(defaultLang != null && defaultLang.getString(id) != null) {
string = defaultLang.getString(id);
}

for(int i = string.length()-1; i >= 0; i--) {
if(string.charAt(i) == '$') {
if(string.charAt(i-1) == '$') {
string = string.substring(0, i) + string.substring(i+1, string.length());
} else if(Character.isDigit(string.charAt(i+1))) {
int argi;
try {
argi = Integer.parseInt(Character.toString(string.charAt(i+1)));
} catch (Exception e) {
string = string.substring(0, i) + "ERROR ARGUMENT" + string.substring(i+2, string.length());
continue;
}

try {
string = string.substring(0, i) + args.get(argi) + string.substring(i+2, string.length());
} catch (Exception e) {
string = string.substring(0, i) + "ERROR ARGUMENT" + string.substring(i+2, string.length());
continue;
}
}
}
}
return string;
}

public static void outputConsole(Level level, String string) {
Bukkit.getLogger().log(level, "[xpShop] " + string);
}

public static void langOutputConsole(String id, Level level, ArrayList<String> args) {
outputConsole(level, parseLanguageString(id, args));
}

public static void outputDebug(Player p, String id, ArrayList<String> args) {
p.sendMessage(ChatColor.WHITE + "[" + ChatColor.DARK_BLUE + "xpShop" + ChatColor.WHITE + "] " + ChatColor.YELLOW + parseLanguageString(id, args));
}

public static void outputError(Player p, String id, ArrayList<String> args) {
p.sendMessage(ChatColor.WHITE + "[" + ChatColor.DARK_BLUE + "xpShop" + ChatColor.WHITE + "] " + ChatColor.RED + parseLanguageString(id, args));
}

public static void outputString(Player p, String string) {
p.sendMessage(ChatColor.WHITE + "[" + ChatColor.DARK_BLUE + "xpShop" + ChatColor.WHITE + "] " + ChatColor.YELLOW + string);
}
}
				
				
				
package me.ibhh.xpShop;


import org.bukkit.event.Listener;
import org.bukkit.event.server.PluginDisableEvent;
import org.bukkit.event.server.PluginEnableEvent;
import org.bukkit.plugin.Plugin;

import com.iCo6.*;

public class server implements Listener {

	    private xpShop plugin;

	    public server(xpShop plugin) {
	        this.plugin = plugin;
	    }


	    public void onPluginDisable(PluginDisableEvent event) {
	        if (plugin.iConomy != null) {
	            if (event.getPlugin().getDescription().getName().equals("iConomy")) {
	                plugin.iConomy = null;
	                System.out.println("[xpShop] un-hooked from iConomy.");
	            } else {
	            	
	            	System.out.println("[xpShop] Error: can't un-hooked from iConomy.");
	            }
	        }
	    }


	    public void onPluginEnable(PluginEnableEvent event) {
	        if (plugin.iConomy == null) {
	            Plugin iConomy = plugin.getServer().getPluginManager().getPlugin("iConomy");

	            if (iConomy != null) {
	                if (iConomy.isEnabled() && iConomy.getClass().getName().equals("com.iConomy.iConomy")) {
	                    plugin.iConomy = (iConomy)iConomy;
	                    System.out.println("[xpShop] hooked into iConomy.");
	                } else {
	                	
	                	System.out.println("[xpShop] Error: can't hooked into iConomy.");
	                }
	               
	            }
	        }
	    }
	}

				
				/**	 Noch nicht von Bukkit implementiert!
				if(player.getTotalExperience() >= sellamount)
				{
					getmoney = (getConfig().getDouble("xptomoney"));
					int neuXP = player.getTotalExperience() - sellamount;
					player.setTotalExperience(neuXP);
					addmoney156(getmoney * sellamount, player);
					if(ActionxpShop.equalsIgnoreCase("sell"))
					{
						player.sendMessage(ChatColor.GRAY + "[xpShop]" + ChatColor.RED + (getConfig().getString("command.success." + ActionxpShop + "." + getConfig().getString("language") + ".1")) + " " + sellamount + " " + (getConfig().getString("command.success." + ActionxpShop + "." + getConfig().getString("language") + ".2")) + " " + addmoney + " " + (getConfig().getString("command.success." + ActionxpShop + "." + getConfig().getString("language") + ".3")));
					}
				}
				else
				{
					player.sendMessage(ChatColor.GRAY + "[xpShop]" + ChatColor.RED + (getConfig().getString("command.error.notenoughxp." + getConfig().getString("language"))));
				}
				**/